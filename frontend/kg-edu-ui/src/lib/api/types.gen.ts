// This file is auto-generated by @hey-api/openapi-ts

/**
 * A "Resource object" representing a course
 */
export type Course = {
    /**
     * An attributes object for a course
     */
    attributes?: {
        /**
         * Field included by default.
         */
        description?: (string | null) | unknown;
        /**
         * Field included by default.
         */
        teacher_id: string;
        /**
         * Field included by default.
         */
        title: string;
    };
    id: string;
    /**
     * A relationships object for a course
     */
    relationships?: {
        [key: string]: never;
    };
    type: string;
};

/**
 * Filters the query to results matching the given filter object
 */
export type CourseFilter = unknown;

export type CourseFilterDescription = {
    contains?: string;
    eq?: string;
    greater_than?: string;
    greater_than_or_equal?: string;
    ilike?: string;
    in?: Array<string>;
    is_nil?: boolean;
    less_than?: string;
    less_than_or_equal?: string;
    like?: string;
    not_eq?: string;
};

export type CourseFilterId = {
    eq?: string;
    greater_than?: string;
    greater_than_or_equal?: string;
    in?: Array<string>;
    is_nil?: boolean;
    less_than?: string;
    less_than_or_equal?: string;
    not_eq?: string;
};

export type CourseFilterTeacherId = {
    eq?: string;
    greater_than?: string;
    greater_than_or_equal?: string;
    in?: Array<string>;
    is_nil?: boolean;
    less_than?: string;
    less_than_or_equal?: string;
    not_eq?: string;
};

export type CourseFilterTitle = {
    contains?: string;
    eq?: string;
    greater_than?: string;
    greater_than_or_equal?: string;
    ilike?: string;
    in?: Array<string>;
    is_nil?: boolean;
    less_than?: string;
    less_than_or_equal?: string;
    like?: string;
    not_eq?: string;
};

/**
 * A "Resource object" representing a course_enrollment
 */
export type CourseEnrollment = {
    /**
     * An attributes object for a course_enrollment
     */
    attributes?: {
        /**
         * Field included by default.
         */
        course_id: string;
        /**
         * Field included by default.
         */
        enrolled_at: string;
        /**
         * Field included by default.
         */
        student_id: string;
    };
    id: string;
    /**
     * A relationships object for a course_enrollment
     */
    relationships?: {
        [key: string]: never;
    };
    type: string;
};

/**
 * Filters the query to results matching the given filter object
 */
export type CourseEnrollmentFilter = unknown;

export type CourseEnrollmentFilterCourseId = {
    eq?: string;
    greater_than?: string;
    greater_than_or_equal?: string;
    in?: Array<string>;
    is_nil?: boolean;
    less_than?: string;
    less_than_or_equal?: string;
    not_eq?: string;
};

export type CourseEnrollmentFilterEnrolledAt = {
    eq?: string;
    greater_than?: string;
    greater_than_or_equal?: string;
    in?: Array<string>;
    is_nil?: boolean;
    less_than?: string;
    less_than_or_equal?: string;
    not_eq?: string;
};

export type CourseEnrollmentFilterId = {
    eq?: string;
    greater_than?: string;
    greater_than_or_equal?: string;
    in?: Array<string>;
    is_nil?: boolean;
    less_than?: string;
    less_than_or_equal?: string;
    not_eq?: string;
};

export type CourseEnrollmentFilterStudentId = {
    eq?: string;
    greater_than?: string;
    greater_than_or_equal?: string;
    in?: Array<string>;
    is_nil?: boolean;
    less_than?: string;
    less_than_or_equal?: string;
    not_eq?: string;
};

export type _Error = {
    /**
     * An application-specific error code, expressed as a string value.
     */
    code?: string;
    /**
     * A human-readable explanation specific to this occurrence of the problem.
     */
    detail?: string;
    /**
     * A unique identifier for this particular occurrence of the problem.
     */
    id?: string;
    links?: Links;
    source?: {
        /**
         * A string indicating which query parameter caused the error.
         */
        parameter?: string;
        /**
         * A JSON Pointer [RFC6901] to the associated entity in the request document [e.g. "/data" for a primary data object, or "/data/attributes/title" for a specific attribute].
         */
        pointer?: string;
    };
    /**
     * The HTTP status code applicable to this problem, expressed as a string value.
     */
    status?: string;
    /**
     * A short, human-readable summary of the problem. It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.
     */
    title?: string;
};

export type Errors = Array<_Error>;

/**
 * A link MUST be represented as either: a string containing the link's URL or a link object.
 */
export type Link = string;

export type Links = {
    [key: string]: Link;
};

/**
 * A "Resource object" representing a user
 */
export type User = {
    /**
     * An attributes object for a user
     */
    attributes?: {
        /**
         * Field included by default.
         */
        email?: (string | null) | unknown;
        /**
         * Field included by default.
         */
        role: 'admin' | 'user' | 'teacher';
        /**
         * Field included by default.
         */
        student_id: string;
    };
    id: string;
    /**
     * A relationships object for a user
     */
    relationships?: {
        [key: string]: never;
    };
    type: string;
};

/**
 * Filters the query to results matching the given filter object
 */
export type UserFilter = unknown;

export type UserFilterEmail = {
    contains?: string;
    eq?: string;
    greater_than?: string;
    greater_than_or_equal?: string;
    in?: Array<string>;
    is_nil?: boolean;
    less_than?: string;
    less_than_or_equal?: string;
    not_eq?: string;
};

export type UserFilterId = {
    eq?: string;
    greater_than?: string;
    greater_than_or_equal?: string;
    in?: Array<string>;
    is_nil?: boolean;
    less_than?: string;
    less_than_or_equal?: string;
    not_eq?: string;
};

export type UserFilterRole = {
    eq?: 'admin' | 'user' | 'teacher';
    greater_than?: 'admin' | 'user' | 'teacher';
    greater_than_or_equal?: 'admin' | 'user' | 'teacher';
    in?: Array<string>;
    is_nil?: boolean;
    less_than?: 'admin' | 'user' | 'teacher';
    less_than_or_equal?: 'admin' | 'user' | 'teacher';
    not_eq?: 'admin' | 'user' | 'teacher';
};

export type UserFilterStudentId = {
    contains?: string;
    eq?: string;
    greater_than?: string;
    greater_than_or_equal?: string;
    ilike?: string;
    in?: Array<string>;
    is_nil?: boolean;
    less_than?: string;
    less_than_or_equal?: string;
    like?: string;
    not_eq?: string;
};

export type GetApiJsonCourseEnrollmentsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Relationship paths to include in the response
         */
        include?: string;
        /**
         * Limits the response fields to only those listed for each type
         */
        fields?: {
            /**
             * Comma separated field names for course_enrollment
             */
            course_enrollment?: string;
            [key: string]: unknown | string | undefined;
        };
    };
    url: '/api/json/course-enrollments';
};

export type GetApiJsonCourseEnrollmentsErrors = {
    /**
     * General Error
     */
    default: Errors;
};

export type GetApiJsonCourseEnrollmentsError = GetApiJsonCourseEnrollmentsErrors[keyof GetApiJsonCourseEnrollmentsErrors];

export type GetApiJsonCourseEnrollmentsResponses = {
    /**
     * Success
     */
    200: {
        data?: CourseEnrollment;
        included?: Array<unknown>;
        meta?: {
            [key: string]: unknown;
        };
    };
};

export type GetApiJsonCourseEnrollmentsResponse = GetApiJsonCourseEnrollmentsResponses[keyof GetApiJsonCourseEnrollmentsResponses];

export type PostApiJsonCourseEnrollmentsData = {
    /**
     * Request body for the /course-enrollments operation on course_enrollment resource
     */
    body: {
        data: {
            attributes?: {
                course_id: string;
                student_id: string;
            };
            relationships?: {
                [key: string]: never;
            };
            type?: 'course_enrollment';
        };
    };
    path?: never;
    query?: {
        /**
         * Relationship paths to include in the response
         */
        include?: string;
        /**
         * Limits the response fields to only those listed for each type
         */
        fields?: {
            /**
             * Comma separated field names for course_enrollment
             */
            course_enrollment?: string;
            [key: string]: unknown | string | undefined;
        };
    };
    url: '/api/json/course-enrollments';
};

export type PostApiJsonCourseEnrollmentsErrors = {
    /**
     * General Error
     */
    default: Errors;
};

export type PostApiJsonCourseEnrollmentsError = PostApiJsonCourseEnrollmentsErrors[keyof PostApiJsonCourseEnrollmentsErrors];

export type PostApiJsonCourseEnrollmentsResponses = {
    /**
     * Success
     */
    201: {
        data?: CourseEnrollment;
        included?: Array<unknown>;
        meta?: {
            [key: string]: unknown;
        };
    };
};

export type PostApiJsonCourseEnrollmentsResponse = PostApiJsonCourseEnrollmentsResponses[keyof PostApiJsonCourseEnrollmentsResponses];

export type GetApiJsonCourseEnrollmentsCourseByCourseIdData = {
    body?: never;
    path: {
        course_id: string;
    };
    query?: {
        /**
         * Filters the query to results with attributes matching the given filter object
         */
        filter?: CourseEnrollmentFilter;
        /**
         * Sort order to apply to the results
         */
        sort?: string;
        /**
         * Relationship paths to include in the response
         */
        include?: string;
        /**
         * Limits the response fields to only those listed for each type
         */
        fields?: {
            /**
             * Comma separated field names for course_enrollment
             */
            course_enrollment?: string;
            [key: string]: unknown | string | undefined;
        };
    };
    url: '/api/json/course-enrollments/course/{course_id}';
};

export type GetApiJsonCourseEnrollmentsCourseByCourseIdErrors = {
    /**
     * General Error
     */
    default: Errors;
};

export type GetApiJsonCourseEnrollmentsCourseByCourseIdError = GetApiJsonCourseEnrollmentsCourseByCourseIdErrors[keyof GetApiJsonCourseEnrollmentsCourseByCourseIdErrors];

export type GetApiJsonCourseEnrollmentsCourseByCourseIdResponses = {
    /**
     * Success
     */
    200: {
        /**
         * An array of resource objects representing a course_enrollment
         */
        data?: Array<CourseEnrollment>;
        included?: Array<unknown>;
        meta?: {
            [key: string]: unknown;
        };
    };
};

export type GetApiJsonCourseEnrollmentsCourseByCourseIdResponse = GetApiJsonCourseEnrollmentsCourseByCourseIdResponses[keyof GetApiJsonCourseEnrollmentsCourseByCourseIdResponses];

export type GetApiJsonCourseEnrollmentsStudentByStudentIdData = {
    body?: never;
    path: {
        student_id: string;
    };
    query?: {
        /**
         * Filters the query to results with attributes matching the given filter object
         */
        filter?: CourseEnrollmentFilter;
        /**
         * Sort order to apply to the results
         */
        sort?: string;
        /**
         * Relationship paths to include in the response
         */
        include?: string;
        /**
         * Limits the response fields to only those listed for each type
         */
        fields?: {
            /**
             * Comma separated field names for course_enrollment
             */
            course_enrollment?: string;
            [key: string]: unknown | string | undefined;
        };
    };
    url: '/api/json/course-enrollments/student/{student_id}';
};

export type GetApiJsonCourseEnrollmentsStudentByStudentIdErrors = {
    /**
     * General Error
     */
    default: Errors;
};

export type GetApiJsonCourseEnrollmentsStudentByStudentIdError = GetApiJsonCourseEnrollmentsStudentByStudentIdErrors[keyof GetApiJsonCourseEnrollmentsStudentByStudentIdErrors];

export type GetApiJsonCourseEnrollmentsStudentByStudentIdResponses = {
    /**
     * Success
     */
    200: {
        /**
         * An array of resource objects representing a course_enrollment
         */
        data?: Array<CourseEnrollment>;
        included?: Array<unknown>;
        meta?: {
            [key: string]: unknown;
        };
    };
};

export type GetApiJsonCourseEnrollmentsStudentByStudentIdResponse = GetApiJsonCourseEnrollmentsStudentByStudentIdResponses[keyof GetApiJsonCourseEnrollmentsStudentByStudentIdResponses];

export type DeleteApiJsonCourseEnrollmentsByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        /**
         * Relationship paths to include in the response
         */
        include?: string;
        /**
         * Limits the response fields to only those listed for each type
         */
        fields?: {
            /**
             * Comma separated field names for course_enrollment
             */
            course_enrollment?: string;
            [key: string]: unknown | string | undefined;
        };
    };
    url: '/api/json/course-enrollments/{id}';
};

export type DeleteApiJsonCourseEnrollmentsByIdErrors = {
    /**
     * General Error
     */
    default: Errors;
};

export type DeleteApiJsonCourseEnrollmentsByIdError = DeleteApiJsonCourseEnrollmentsByIdErrors[keyof DeleteApiJsonCourseEnrollmentsByIdErrors];

export type DeleteApiJsonCourseEnrollmentsByIdResponses = {
    /**
     * Deleted successfully
     */
    200: unknown;
};

export type GetApiJsonCoursesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Relationship paths to include in the response
         */
        include?: string;
        /**
         * Limits the response fields to only those listed for each type
         */
        fields?: {
            /**
             * Comma separated field names for course
             */
            course?: string;
            [key: string]: unknown | string | undefined;
        };
    };
    url: '/api/json/courses';
};

export type GetApiJsonCoursesErrors = {
    /**
     * General Error
     */
    default: Errors;
};

export type GetApiJsonCoursesError = GetApiJsonCoursesErrors[keyof GetApiJsonCoursesErrors];

export type GetApiJsonCoursesResponses = {
    /**
     * Success
     */
    200: {
        data?: Course;
        included?: Array<unknown>;
        meta?: {
            [key: string]: unknown;
        };
    };
};

export type GetApiJsonCoursesResponse = GetApiJsonCoursesResponses[keyof GetApiJsonCoursesResponses];

export type PostApiJsonCoursesData = {
    /**
     * Request body for the /courses operation on course resource
     */
    body: {
        data: {
            attributes?: {
                description?: string | unknown;
                teacher_id: string;
                title: string;
            };
            relationships?: {
                [key: string]: never;
            };
            type?: 'course';
        };
    };
    path?: never;
    query?: {
        /**
         * Relationship paths to include in the response
         */
        include?: string;
        /**
         * Limits the response fields to only those listed for each type
         */
        fields?: {
            /**
             * Comma separated field names for course
             */
            course?: string;
            [key: string]: unknown | string | undefined;
        };
    };
    url: '/api/json/courses';
};

export type PostApiJsonCoursesErrors = {
    /**
     * General Error
     */
    default: Errors;
};

export type PostApiJsonCoursesError = PostApiJsonCoursesErrors[keyof PostApiJsonCoursesErrors];

export type PostApiJsonCoursesResponses = {
    /**
     * Success
     */
    201: {
        data?: Course;
        included?: Array<unknown>;
        meta?: {
            [key: string]: unknown;
        };
    };
};

export type PostApiJsonCoursesResponse = PostApiJsonCoursesResponses[keyof PostApiJsonCoursesResponses];

export type GetApiJsonCoursesStudentByStudentIdData = {
    body?: never;
    path: {
        student_id: string;
    };
    query?: {
        /**
         * Filters the query to results with attributes matching the given filter object
         */
        filter?: CourseFilter;
        /**
         * Sort order to apply to the results
         */
        sort?: string;
        /**
         * Relationship paths to include in the response
         */
        include?: string;
        /**
         * Limits the response fields to only those listed for each type
         */
        fields?: {
            /**
             * Comma separated field names for course
             */
            course?: string;
            [key: string]: unknown | string | undefined;
        };
    };
    url: '/api/json/courses/student/{student_id}';
};

export type GetApiJsonCoursesStudentByStudentIdErrors = {
    /**
     * General Error
     */
    default: Errors;
};

export type GetApiJsonCoursesStudentByStudentIdError = GetApiJsonCoursesStudentByStudentIdErrors[keyof GetApiJsonCoursesStudentByStudentIdErrors];

export type GetApiJsonCoursesStudentByStudentIdResponses = {
    /**
     * Success
     */
    200: {
        /**
         * An array of resource objects representing a course
         */
        data?: Array<Course>;
        included?: Array<unknown>;
        meta?: {
            [key: string]: unknown;
        };
    };
};

export type GetApiJsonCoursesStudentByStudentIdResponse = GetApiJsonCoursesStudentByStudentIdResponses[keyof GetApiJsonCoursesStudentByStudentIdResponses];

export type GetApiJsonCoursesTeacherByTeacherIdData = {
    body?: never;
    path: {
        teacher_id: string;
    };
    query?: {
        /**
         * Filters the query to results with attributes matching the given filter object
         */
        filter?: CourseFilter;
        /**
         * Sort order to apply to the results
         */
        sort?: string;
        /**
         * Relationship paths to include in the response
         */
        include?: string;
        /**
         * Limits the response fields to only those listed for each type
         */
        fields?: {
            /**
             * Comma separated field names for course
             */
            course?: string;
            [key: string]: unknown | string | undefined;
        };
    };
    url: '/api/json/courses/teacher/{teacher_id}';
};

export type GetApiJsonCoursesTeacherByTeacherIdErrors = {
    /**
     * General Error
     */
    default: Errors;
};

export type GetApiJsonCoursesTeacherByTeacherIdError = GetApiJsonCoursesTeacherByTeacherIdErrors[keyof GetApiJsonCoursesTeacherByTeacherIdErrors];

export type GetApiJsonCoursesTeacherByTeacherIdResponses = {
    /**
     * Success
     */
    200: {
        /**
         * An array of resource objects representing a course
         */
        data?: Array<Course>;
        included?: Array<unknown>;
        meta?: {
            [key: string]: unknown;
        };
    };
};

export type GetApiJsonCoursesTeacherByTeacherIdResponse = GetApiJsonCoursesTeacherByTeacherIdResponses[keyof GetApiJsonCoursesTeacherByTeacherIdResponses];

export type DeleteApiJsonCoursesByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        /**
         * Relationship paths to include in the response
         */
        include?: string;
        /**
         * Limits the response fields to only those listed for each type
         */
        fields?: {
            /**
             * Comma separated field names for course
             */
            course?: string;
            [key: string]: unknown | string | undefined;
        };
    };
    url: '/api/json/courses/{id}';
};

export type DeleteApiJsonCoursesByIdErrors = {
    /**
     * General Error
     */
    default: Errors;
};

export type DeleteApiJsonCoursesByIdError = DeleteApiJsonCoursesByIdErrors[keyof DeleteApiJsonCoursesByIdErrors];

export type DeleteApiJsonCoursesByIdResponses = {
    /**
     * Deleted successfully
     */
    200: unknown;
};

export type PatchApiJsonCoursesByIdData = {
    /**
     * Request body for the /courses/:id operation on course resource
     */
    body?: {
        data: {
            attributes?: {
                [key: string]: never;
            };
            id: string;
            relationships?: {
                [key: string]: never;
            };
            type?: 'course';
        };
    };
    path: {
        id: string;
    };
    query?: {
        /**
         * Relationship paths to include in the response
         */
        include?: string;
        /**
         * Limits the response fields to only those listed for each type
         */
        fields?: {
            /**
             * Comma separated field names for course
             */
            course?: string;
            [key: string]: unknown | string | undefined;
        };
    };
    url: '/api/json/courses/{id}';
};

export type PatchApiJsonCoursesByIdErrors = {
    /**
     * General Error
     */
    default: Errors;
};

export type PatchApiJsonCoursesByIdError = PatchApiJsonCoursesByIdErrors[keyof PatchApiJsonCoursesByIdErrors];

export type PatchApiJsonCoursesByIdResponses = {
    /**
     * Success
     */
    200: {
        data?: Course;
        included?: Array<unknown>;
        meta?: {
            [key: string]: unknown;
        };
    };
};

export type PatchApiJsonCoursesByIdResponse = PatchApiJsonCoursesByIdResponses[keyof PatchApiJsonCoursesByIdResponses];

export type GetApiJsonUsersData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Filters the query to results with attributes matching the given filter object
         */
        filter?: UserFilter;
        /**
         * Sort order to apply to the results
         */
        sort?: string;
        /**
         * Relationship paths to include in the response
         */
        include?: string;
        /**
         * Limits the response fields to only those listed for each type
         */
        fields?: {
            /**
             * Comma separated field names for user
             */
            user?: string;
            [key: string]: unknown | string | undefined;
        };
    };
    url: '/api/json/users';
};

export type GetApiJsonUsersErrors = {
    /**
     * General Error
     */
    default: Errors;
};

export type GetApiJsonUsersError = GetApiJsonUsersErrors[keyof GetApiJsonUsersErrors];

export type GetApiJsonUsersResponses = {
    /**
     * Success
     */
    200: {
        /**
         * An array of resource objects representing a user
         */
        data?: Array<User>;
        included?: Array<unknown>;
        meta?: {
            [key: string]: unknown;
        };
    };
};

export type GetApiJsonUsersResponse = GetApiJsonUsersResponses[keyof GetApiJsonUsersResponses];

export type PatchApiJsonUsersChangePasswordData = {
    /**
     * Request body for the /users/change-password operation on user resource
     */
    body: {
        data: {
            attributes?: {
                current_password: string;
                password: string;
                password_confirmation: string;
            };
            id: string;
            relationships?: {
                [key: string]: never;
            };
            type?: 'user';
        };
    };
    path?: never;
    query?: {
        /**
         * Relationship paths to include in the response
         */
        include?: string;
        /**
         * Limits the response fields to only those listed for each type
         */
        fields?: {
            /**
             * Comma separated field names for user
             */
            user?: string;
            [key: string]: unknown | string | undefined;
        };
    };
    url: '/api/json/users/change-password';
};

export type PatchApiJsonUsersChangePasswordErrors = {
    /**
     * General Error
     */
    default: Errors;
};

export type PatchApiJsonUsersChangePasswordError = PatchApiJsonUsersChangePasswordErrors[keyof PatchApiJsonUsersChangePasswordErrors];

export type PatchApiJsonUsersChangePasswordResponses = {
    /**
     * Success
     */
    200: {
        data?: User;
        included?: Array<unknown>;
        meta?: {
            [key: string]: unknown;
        };
    };
};

export type PatchApiJsonUsersChangePasswordResponse = PatchApiJsonUsersChangePasswordResponses[keyof PatchApiJsonUsersChangePasswordResponses];

export type GetApiJsonUsersMeData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Relationship paths to include in the response
         */
        include?: string;
        /**
         * Limits the response fields to only those listed for each type
         */
        fields?: {
            /**
             * Comma separated field names for user
             */
            user?: string;
            [key: string]: unknown | string | undefined;
        };
    };
    url: '/api/json/users/me';
};

export type GetApiJsonUsersMeErrors = {
    /**
     * General Error
     */
    default: Errors;
};

export type GetApiJsonUsersMeError = GetApiJsonUsersMeErrors[keyof GetApiJsonUsersMeErrors];

export type GetApiJsonUsersMeResponses = {
    /**
     * Success
     */
    200: {
        data?: User;
        included?: Array<unknown>;
        meta?: {
            [key: string]: unknown;
        };
    };
};

export type GetApiJsonUsersMeResponse = GetApiJsonUsersMeResponses[keyof GetApiJsonUsersMeResponses];

export type PostApiJsonUsersRegisterData = {
    /**
     * Request body for the /users/register operation on user resource
     */
    body: {
        data: {
            attributes?: {
                /**
                 * The proposed password for the user, in plain text.
                 */
                password: string;
                /**
                 * The proposed password for the user (again), in plain text.
                 */
                password_confirmation: string;
                /**
                 * The role of the user (admin, user, teacher). Defaults to :user.
                 */
                role?: ('admin' | 'user' | 'teacher') | unknown;
                student_id: string;
            };
            relationships?: {
                [key: string]: never;
            };
            type?: 'user';
        };
    };
    path?: never;
    query?: {
        /**
         * Relationship paths to include in the response
         */
        include?: string;
        /**
         * Limits the response fields to only those listed for each type
         */
        fields?: {
            /**
             * Comma separated field names for user
             */
            user?: string;
            [key: string]: unknown | string | undefined;
        };
    };
    url: '/api/json/users/register';
};

export type PostApiJsonUsersRegisterErrors = {
    /**
     * General Error
     */
    default: Errors;
};

export type PostApiJsonUsersRegisterError = PostApiJsonUsersRegisterErrors[keyof PostApiJsonUsersRegisterErrors];

export type PostApiJsonUsersRegisterResponses = {
    /**
     * Success
     */
    201: {
        data?: User;
        included?: Array<unknown>;
        meta?: {
            [key: string]: unknown;
        };
    };
};

export type PostApiJsonUsersRegisterResponse = PostApiJsonUsersRegisterResponses[keyof PostApiJsonUsersRegisterResponses];

export type PatchApiJsonUsersResetPasswordData = {
    /**
     * Request body for the /users/reset-password operation on user resource
     */
    body: {
        data: {
            attributes?: {
                /**
                 * The proposed password for the user, in plain text.
                 */
                password: string;
                /**
                 * The proposed password for the user (again), in plain text.
                 */
                password_confirmation: string;
                reset_token: string;
            };
            id: string;
            relationships?: {
                [key: string]: never;
            };
            type?: 'user';
        };
    };
    path?: never;
    query?: {
        /**
         * Relationship paths to include in the response
         */
        include?: string;
        /**
         * Limits the response fields to only those listed for each type
         */
        fields?: {
            /**
             * Comma separated field names for user
             */
            user?: string;
            [key: string]: unknown | string | undefined;
        };
    };
    url: '/api/json/users/reset-password';
};

export type PatchApiJsonUsersResetPasswordErrors = {
    /**
     * General Error
     */
    default: Errors;
};

export type PatchApiJsonUsersResetPasswordError = PatchApiJsonUsersResetPasswordErrors[keyof PatchApiJsonUsersResetPasswordErrors];

export type PatchApiJsonUsersResetPasswordResponses = {
    /**
     * Success
     */
    200: {
        data?: User;
        included?: Array<unknown>;
        meta?: {
            [key: string]: unknown;
        };
    };
};

export type PatchApiJsonUsersResetPasswordResponse = PatchApiJsonUsersResetPasswordResponses[keyof PatchApiJsonUsersResetPasswordResponses];

export type PostApiJsonUsersSignInData = {
    /**
     * Request body for the /users/sign-in operation on user resource
     */
    body: {
        data: {
            attributes?: {
                /**
                 * The password to check for the matching user.
                 */
                password: string;
                /**
                 * The student ID to use for retrieving the user.
                 */
                student_id: string;
            };
            relationships?: {
                [key: string]: never;
            };
            type?: 'user';
        };
    };
    path?: never;
    query?: {
        /**
         * Relationship paths to include in the response
         */
        include?: string;
        /**
         * Limits the response fields to only those listed for each type
         */
        fields?: {
            /**
             * Comma separated field names for user
             */
            user?: string;
            [key: string]: unknown | string | undefined;
        };
    };
    url: '/api/json/users/sign-in';
};

export type PostApiJsonUsersSignInErrors = {
    /**
     * General Error
     */
    default: Errors;
};

export type PostApiJsonUsersSignInError = PostApiJsonUsersSignInErrors[keyof PostApiJsonUsersSignInErrors];

export type PostApiJsonUsersSignInResponses = {
    /**
     * Success
     */
    201: {
        data?: User;
        included?: Array<unknown>;
        meta?: {
            [key: string]: unknown;
        };
    };
};

export type PostApiJsonUsersSignInResponse = PostApiJsonUsersSignInResponses[keyof PostApiJsonUsersSignInResponses];

export type DeleteApiJsonUsersByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        /**
         * Relationship paths to include in the response
         */
        include?: string;
        /**
         * Limits the response fields to only those listed for each type
         */
        fields?: {
            /**
             * Comma separated field names for user
             */
            user?: string;
            [key: string]: unknown | string | undefined;
        };
    };
    url: '/api/json/users/{id}';
};

export type DeleteApiJsonUsersByIdErrors = {
    /**
     * General Error
     */
    default: Errors;
};

export type DeleteApiJsonUsersByIdError = DeleteApiJsonUsersByIdErrors[keyof DeleteApiJsonUsersByIdErrors];

export type DeleteApiJsonUsersByIdResponses = {
    /**
     * Deleted successfully
     */
    200: unknown;
};

export type GetApiJsonUsersByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        /**
         * Relationship paths to include in the response
         */
        include?: string;
        /**
         * Limits the response fields to only those listed for each type
         */
        fields?: {
            /**
             * Comma separated field names for user
             */
            user?: string;
            [key: string]: unknown | string | undefined;
        };
    };
    url: '/api/json/users/{id}';
};

export type GetApiJsonUsersByIdErrors = {
    /**
     * General Error
     */
    default: Errors;
};

export type GetApiJsonUsersByIdError = GetApiJsonUsersByIdErrors[keyof GetApiJsonUsersByIdErrors];

export type GetApiJsonUsersByIdResponses = {
    /**
     * Success
     */
    200: {
        data?: User;
        included?: Array<unknown>;
        meta?: {
            [key: string]: unknown;
        };
    };
};

export type GetApiJsonUsersByIdResponse = GetApiJsonUsersByIdResponses[keyof GetApiJsonUsersByIdResponses];

export type PatchApiJsonUsersByIdData = {
    /**
     * Request body for the /users/:id operation on user resource
     */
    body?: {
        data: {
            attributes?: {
                [key: string]: never;
            };
            id: string;
            relationships?: {
                [key: string]: never;
            };
            type?: 'user';
        };
    };
    path: {
        id: string;
    };
    query?: {
        /**
         * Relationship paths to include in the response
         */
        include?: string;
        /**
         * Limits the response fields to only those listed for each type
         */
        fields?: {
            /**
             * Comma separated field names for user
             */
            user?: string;
            [key: string]: unknown | string | undefined;
        };
    };
    url: '/api/json/users/{id}';
};

export type PatchApiJsonUsersByIdErrors = {
    /**
     * General Error
     */
    default: Errors;
};

export type PatchApiJsonUsersByIdError = PatchApiJsonUsersByIdErrors[keyof PatchApiJsonUsersByIdErrors];

export type PatchApiJsonUsersByIdResponses = {
    /**
     * Success
     */
    200: {
        data?: User;
        included?: Array<unknown>;
        meta?: {
            [key: string]: unknown;
        };
    };
};

export type PatchApiJsonUsersByIdResponse = PatchApiJsonUsersByIdResponses[keyof PatchApiJsonUsersByIdResponses];

export type ClientOptions = {
    baseUrl: 'http://localhost:4000' | (string & {});
};