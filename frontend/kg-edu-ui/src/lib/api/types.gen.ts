// This file is auto-generated by @hey-api/openapi-ts

export type _Error = {
    /**
     * An application-specific error code, expressed as a string value.
     */
    code?: string;
    /**
     * A human-readable explanation specific to this occurrence of the problem.
     */
    detail?: string;
    /**
     * A unique identifier for this particular occurrence of the problem.
     */
    id?: string;
    links?: Links;
    source?: {
        /**
         * A string indicating which query parameter caused the error.
         */
        parameter?: string;
        /**
         * A JSON Pointer [RFC6901] to the associated entity in the request document [e.g. "/data" for a primary data object, or "/data/attributes/title" for a specific attribute].
         */
        pointer?: string;
    };
    /**
     * The HTTP status code applicable to this problem, expressed as a string value.
     */
    status?: string;
    /**
     * A short, human-readable summary of the problem. It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.
     */
    title?: string;
};

export type Errors = Array<_Error>;

/**
 * A link MUST be represented as either: a string containing the link's URL or a link object.
 */
export type Link = string;

export type Links = {
    [key: string]: Link;
};

/**
 * A "Resource object" representing a user
 */
export type User = {
    /**
     * An attributes object for a user
     */
    attributes?: {
        /**
         * Field included by default.
         */
        email: string;
    };
    id: string;
    /**
     * A relationships object for a user
     */
    relationships?: {
        [key: string]: never;
    };
    type: string;
};

/**
 * Filters the query to results matching the given filter object
 */
export type UserFilter = unknown;

export type UserFilterEmail = {
    contains?: string;
    eq?: string;
    greater_than?: string;
    greater_than_or_equal?: string;
    in?: Array<string>;
    is_nil?: boolean;
    less_than?: string;
    less_than_or_equal?: string;
    not_eq?: string;
};

export type UserFilterId = {
    eq?: string;
    greater_than?: string;
    greater_than_or_equal?: string;
    in?: Array<string>;
    is_nil?: boolean;
    less_than?: string;
    less_than_or_equal?: string;
    not_eq?: string;
};

export type PatchApiJsonUsersChangePasswordData = {
    /**
     * Request body for the /users/change-password operation on user resource
     */
    body: {
        data: {
            attributes?: {
                current_password: string;
                password: string;
                password_confirmation: string;
            };
            id: string;
            relationships?: {
                [key: string]: never;
            };
            type?: 'user';
        };
    };
    path?: never;
    query?: {
        /**
         * Relationship paths to include in the response
         */
        include?: string;
        /**
         * Limits the response fields to only those listed for each type
         */
        fields?: {
            /**
             * Comma separated field names for user
             */
            user?: string;
            [key: string]: unknown | string | undefined;
        };
    };
    url: '/api/json/users/change-password';
};

export type PatchApiJsonUsersChangePasswordErrors = {
    /**
     * General Error
     */
    default: Errors;
};

export type PatchApiJsonUsersChangePasswordError = PatchApiJsonUsersChangePasswordErrors[keyof PatchApiJsonUsersChangePasswordErrors];

export type PatchApiJsonUsersChangePasswordResponses = {
    /**
     * Success
     */
    200: {
        data?: User;
        included?: Array<unknown>;
        meta?: {
            [key: string]: unknown;
        };
    };
};

export type PatchApiJsonUsersChangePasswordResponse = PatchApiJsonUsersChangePasswordResponses[keyof PatchApiJsonUsersChangePasswordResponses];

export type GetApiJsonUsersMeData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Relationship paths to include in the response
         */
        include?: string;
        /**
         * Limits the response fields to only those listed for each type
         */
        fields?: {
            /**
             * Comma separated field names for user
             */
            user?: string;
            [key: string]: unknown | string | undefined;
        };
    };
    url: '/api/json/users/me';
};

export type GetApiJsonUsersMeErrors = {
    /**
     * General Error
     */
    default: Errors;
};

export type GetApiJsonUsersMeError = GetApiJsonUsersMeErrors[keyof GetApiJsonUsersMeErrors];

export type GetApiJsonUsersMeResponses = {
    /**
     * Success
     */
    200: {
        data?: User;
        included?: Array<unknown>;
        meta?: {
            [key: string]: unknown;
        };
    };
};

export type GetApiJsonUsersMeResponse = GetApiJsonUsersMeResponses[keyof GetApiJsonUsersMeResponses];

export type PostApiJsonUsersRegisterData = {
    /**
     * Request body for the /users/register operation on user resource
     */
    body: {
        data: {
            attributes?: {
                email: string;
                /**
                 * The proposed password for the user, in plain text.
                 */
                password: string;
                /**
                 * The proposed password for the user (again), in plain text.
                 */
                password_confirmation: string;
            };
            relationships?: {
                [key: string]: never;
            };
            type?: 'user';
        };
    };
    path?: never;
    query?: {
        /**
         * Relationship paths to include in the response
         */
        include?: string;
        /**
         * Limits the response fields to only those listed for each type
         */
        fields?: {
            /**
             * Comma separated field names for user
             */
            user?: string;
            [key: string]: unknown | string | undefined;
        };
    };
    url: '/api/json/users/register';
};

export type PostApiJsonUsersRegisterErrors = {
    /**
     * General Error
     */
    default: Errors;
};

export type PostApiJsonUsersRegisterError = PostApiJsonUsersRegisterErrors[keyof PostApiJsonUsersRegisterErrors];

export type PostApiJsonUsersRegisterResponses = {
    /**
     * Success
     */
    201: {
        data?: User;
        included?: Array<unknown>;
        meta?: {
            [key: string]: unknown;
        };
    };
};

export type PostApiJsonUsersRegisterResponse = PostApiJsonUsersRegisterResponses[keyof PostApiJsonUsersRegisterResponses];

export type PatchApiJsonUsersResetPasswordData = {
    /**
     * Request body for the /users/reset-password operation on user resource
     */
    body: {
        data: {
            attributes?: {
                /**
                 * The proposed password for the user, in plain text.
                 */
                password: string;
                /**
                 * The proposed password for the user (again), in plain text.
                 */
                password_confirmation: string;
                reset_token: string;
            };
            id: string;
            relationships?: {
                [key: string]: never;
            };
            type?: 'user';
        };
    };
    path?: never;
    query?: {
        /**
         * Relationship paths to include in the response
         */
        include?: string;
        /**
         * Limits the response fields to only those listed for each type
         */
        fields?: {
            /**
             * Comma separated field names for user
             */
            user?: string;
            [key: string]: unknown | string | undefined;
        };
    };
    url: '/api/json/users/reset-password';
};

export type PatchApiJsonUsersResetPasswordErrors = {
    /**
     * General Error
     */
    default: Errors;
};

export type PatchApiJsonUsersResetPasswordError = PatchApiJsonUsersResetPasswordErrors[keyof PatchApiJsonUsersResetPasswordErrors];

export type PatchApiJsonUsersResetPasswordResponses = {
    /**
     * Success
     */
    200: {
        data?: User;
        included?: Array<unknown>;
        meta?: {
            [key: string]: unknown;
        };
    };
};

export type PatchApiJsonUsersResetPasswordResponse = PatchApiJsonUsersResetPasswordResponses[keyof PatchApiJsonUsersResetPasswordResponses];

export type PostApiJsonUsersSignInData = {
    /**
     * Request body for the /users/sign-in operation on user resource
     */
    body: {
        data: {
            attributes?: {
                /**
                 * The email to use for retrieving the user.
                 */
                email: string;
                /**
                 * The password to check for the matching user.
                 */
                password: string;
            };
            relationships?: {
                [key: string]: never;
            };
            type?: 'user';
        };
    };
    path?: never;
    query?: {
        /**
         * Relationship paths to include in the response
         */
        include?: string;
        /**
         * Limits the response fields to only those listed for each type
         */
        fields?: {
            /**
             * Comma separated field names for user
             */
            user?: string;
            [key: string]: unknown | string | undefined;
        };
    };
    url: '/api/json/users/sign-in';
};

export type PostApiJsonUsersSignInErrors = {
    /**
     * General Error
     */
    default: Errors;
};

export type PostApiJsonUsersSignInError = PostApiJsonUsersSignInErrors[keyof PostApiJsonUsersSignInErrors];

export type PostApiJsonUsersSignInResponses = {
    /**
     * Success
     */
    201: {
        data?: User;
        included?: Array<unknown>;
        meta?: {
            [key: string]: unknown;
        };
    };
};

export type PostApiJsonUsersSignInResponse = PostApiJsonUsersSignInResponses[keyof PostApiJsonUsersSignInResponses];

export type ClientOptions = {
    baseUrl: 'http://localhost:4000' | (string & {});
};