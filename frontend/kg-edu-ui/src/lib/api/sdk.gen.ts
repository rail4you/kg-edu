// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { PatchApiJsonUsersChangePasswordData, PatchApiJsonUsersChangePasswordResponses, PatchApiJsonUsersChangePasswordErrors, GetApiJsonUsersMeData, GetApiJsonUsersMeResponses, GetApiJsonUsersMeErrors, PostApiJsonUsersRegisterData, PostApiJsonUsersRegisterResponses, PostApiJsonUsersRegisterErrors, PatchApiJsonUsersResetPasswordData, PatchApiJsonUsersResetPasswordResponses, PatchApiJsonUsersResetPasswordErrors, PostApiJsonUsersSignInData, PostApiJsonUsersSignInResponses, PostApiJsonUsersSignInErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * /users/change-password operation on user resource
 */
export const patchApiJsonUsersChangePassword = <ThrowOnError extends boolean = false>(options: Options<PatchApiJsonUsersChangePasswordData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchApiJsonUsersChangePasswordResponses, PatchApiJsonUsersChangePasswordErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/json/users/change-password',
        ...options,
        headers: {
            'Content-Type': 'application/vnd.api+json',
            ...options.headers
        }
    });
};

/**
 * Get the current authenticated user
 */
export const getApiJsonUsersMe = <ThrowOnError extends boolean = false>(options?: Options<GetApiJsonUsersMeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiJsonUsersMeResponses, GetApiJsonUsersMeErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/json/users/me',
        ...options
    });
};

/**
 * Register a new user with a student ID and password.
 */
export const postApiJsonUsersRegister = <ThrowOnError extends boolean = false>(options: Options<PostApiJsonUsersRegisterData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiJsonUsersRegisterResponses, PostApiJsonUsersRegisterErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/json/users/register',
        ...options,
        headers: {
            'Content-Type': 'application/vnd.api+json',
            ...options.headers
        }
    });
};

/**
 * /users/reset-password operation on user resource
 */
export const patchApiJsonUsersResetPassword = <ThrowOnError extends boolean = false>(options: Options<PatchApiJsonUsersResetPasswordData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchApiJsonUsersResetPasswordResponses, PatchApiJsonUsersResetPasswordErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/json/users/reset-password',
        ...options,
        headers: {
            'Content-Type': 'application/vnd.api+json',
            ...options.headers
        }
    });
};

/**
 * Attempt to sign in using a student ID and password.
 */
export const postApiJsonUsersSignIn = <ThrowOnError extends boolean = false>(options: Options<PostApiJsonUsersSignInData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiJsonUsersSignInResponses, PostApiJsonUsersSignInErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/json/users/sign-in',
        ...options,
        headers: {
            'Content-Type': 'application/vnd.api+json',
            ...options.headers
        }
    });
};