defmodule KgEdu.Repo.Migrations.RelationTypeTable do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:relation_types, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :name, :text, null: false
      add :display_name, :text, null: false
      add :description, :text
      add :inverse_name, :text
      add :is_symmetric, :boolean, null: false, default: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create unique_index(:relation_types, [:name], name: "relation_types_unique_name_index")

    alter table(:knowledge_relations) do
      remove :relation_type

      add :relation_type_id,
          references(:relation_types,
            column: :id,
            name: "knowledge_relations_relation_type_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false
    end

    drop_if_exists unique_index(
                     :knowledge_relations,
                     [:source_knowledge_id, :target_knowledge_id, :relation_type],
                     name: "knowledge_relations_unique_relation_index"
                   )

    create unique_index(
             :knowledge_relations,
             [:source_knowledge_id, :target_knowledge_id, :relation_type_id],
             name: "knowledge_relations_unique_relation_index"
           )
  end

  def down do
    drop_if_exists unique_index(
                     :knowledge_relations,
                     [:source_knowledge_id, :target_knowledge_id, :relation_type_id],
                     name: "knowledge_relations_unique_relation_index"
                   )

    create unique_index(
             :knowledge_relations,
             [:source_knowledge_id, :target_knowledge_id, :relation_type],
             name: "knowledge_relations_unique_relation_index"
           )

    drop constraint(:knowledge_relations, "knowledge_relations_relation_type_id_fkey")

    alter table(:knowledge_relations) do
      remove :relation_type_id
      add :relation_type, :text, null: false
    end

    drop_if_exists unique_index(:relation_types, [:name],
                     name: "relation_types_unique_name_index"
                   )

    drop table(:relation_types)
  end
end
