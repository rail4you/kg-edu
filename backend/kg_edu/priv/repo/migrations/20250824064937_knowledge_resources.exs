defmodule KgEdu.Repo.Migrations.KnowledgeResources do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:knowledge_resources, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :name, :text, null: false
      add :description, :text

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :created_by_id,
          references(:users,
            column: :id,
            name: "knowledge_resources_created_by_id_fkey",
            type: :uuid,
            prefix: "public"
          )
    end

    create unique_index(:knowledge_resources, [:name],
             name: "knowledge_resources_unique_name_index"
           )

    create table(:knowledge_relations, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :relation_type, :text, null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :source_knowledge_id,
          references(:knowledge_resources,
            column: :id,
            name: "knowledge_relations_source_knowledge_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :target_knowledge_id,
          references(:knowledge_resources,
            column: :id,
            name: "knowledge_relations_target_knowledge_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :created_by_id,
          references(:users,
            column: :id,
            name: "knowledge_relations_created_by_id_fkey",
            type: :uuid,
            prefix: "public"
          )
    end

    create unique_index(
             :knowledge_relations,
             [:source_knowledge_id, :target_knowledge_id, :relation_type],
             name: "knowledge_relations_unique_relation_index"
           )
  end

  def down do
    drop_if_exists unique_index(
                     :knowledge_relations,
                     [:source_knowledge_id, :target_knowledge_id, :relation_type],
                     name: "knowledge_relations_unique_relation_index"
                   )

    drop constraint(:knowledge_relations, "knowledge_relations_source_knowledge_id_fkey")

    drop constraint(:knowledge_relations, "knowledge_relations_target_knowledge_id_fkey")

    drop constraint(:knowledge_relations, "knowledge_relations_created_by_id_fkey")

    drop table(:knowledge_relations)

    drop_if_exists unique_index(:knowledge_resources, [:name],
                     name: "knowledge_resources_unique_name_index"
                   )

    drop constraint(:knowledge_resources, "knowledge_resources_created_by_id_fkey")

    drop table(:knowledge_resources)
  end
end
