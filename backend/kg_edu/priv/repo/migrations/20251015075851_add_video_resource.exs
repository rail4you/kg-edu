defmodule KgEdu.Repo.Migrations.AddVideoResource do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:videos, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :title, :text, null: false
      add :asset_id, :text, null: false
      add :playback_id, :text, null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :chapter_id,
          references(:chapters,
            column: :id,
            name: "videos_chapter_id_fkey",
            type: :uuid,
            prefix: "public"
          )

      add :knowledge_resource_id,
          references(:knowledge_resources,
            column: :id,
            name: "videos_knowledge_resource_id_fkey",
            type: :uuid,
            prefix: "public"
          )
    end

    create unique_index(:videos, [:asset_id], name: "videos_unique_asset_id_index")

    create unique_index(:videos, [:playback_id], name: "videos_unique_playback_id_index")
  end

  def down do
    drop_if_exists unique_index(:videos, [:playback_id], name: "videos_unique_playback_id_index")

    drop_if_exists unique_index(:videos, [:asset_id], name: "videos_unique_asset_id_index")

    drop constraint(:videos, "videos_chapter_id_fkey")

    drop constraint(:videos, "videos_knowledge_resource_id_fkey")

    drop table(:videos)
  end
end
