defmodule KgEdu.Repo.Migrations.AddRolesAndCourses do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    alter table(:users) do
      add :role, :text, null: false, default: "user"
    end

    create table(:courses, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :title, :text, null: false
      add :description, :text

      add :teacher_id,
          references(:users,
            column: :id,
            name: "courses_teacher_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create table(:course_enrollments, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true

      add :course_id,
          references(:courses,
            column: :id,
            name: "course_enrollments_course_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :student_id,
          references(:users,
            column: :id,
            name: "course_enrollments_student_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :enrolled_at, :utc_datetime,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create unique_index(:course_enrollments, [:course_id, :student_id],
             name: "course_enrollments_unique_course_student_index"
           )
  end

  def down do
    drop_if_exists unique_index(:course_enrollments, [:course_id, :student_id],
                     name: "course_enrollments_unique_course_student_index"
                   )

    drop constraint(:course_enrollments, "course_enrollments_course_id_fkey")

    drop constraint(:course_enrollments, "course_enrollments_student_id_fkey")

    drop table(:course_enrollments)

    drop constraint(:courses, "courses_teacher_id_fkey")

    drop table(:courses)

    alter table(:users) do
      remove :role
    end
  end
end
